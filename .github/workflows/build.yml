name: Build
on:
  push:
    branches:
      - master
      - develop
      - 'feature/**'
      - 'bugfix/**'
env:
  vulkan_sdk_version: '1.3.250.1'
  vulkan_sdk_modules: 'Vulkan-Headers Vulkan-Loader SPIRV-Tools Glslang'
  itch_io_project_url: 'xryp/neptune'

jobs:
  build_ubuntu:
    runs-on: ubuntu-latest
    env:
      release_name: neptune-linux
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
            name: "GCC Shared",
            cmake_build_shared_libs: ON,
          }
          - {
            name: "GCC Static",
            cmake_build_shared_libs: OFF,
          }
        cmake_build_type: [Debug, Release]
    name: "Ubuntu ${{ matrix.config.name }} ${{ matrix.cmake_build_type }}"
    steps:
      - name: Checkout
        uses: nschloe/action-cached-lfs-checkout@v1
        with:
          submodules: true

      - name: Install dependencies
        run: |
          sudo apt-get update # Always do this step to prevent package urls to get outdated
          sudo apt-get install -y build-essential cmake gcc libunwind-dev libx11-xcb-dev libxcb-xkb-dev libasound2-dev

      - name: Prepare Vulkan SDK
        uses: humbletim/setup-vulkan-sdk@v1.2.0
        with:
          vulkan-query-version: ${{ env.vulkan_sdk_version }}
          vulkan-components: ${{ env.vulkan_sdk_modules }}
          vulkan-use-cache: true

      - name: Configure CMake
        run: |
          cmake -H. -Bbuild \
            -DCMAKE_BUILD_TYPE=${{ matrix.cmake_build_type }} \
            -DCMAKE_INSTALL_PREFIX=${{ env.release_name }} \
            -DBUILD_SHARED_LIBS=${{ matrix.config.cmake_build_shared_libs }} \
            -DREAPER_BUILD_WARNINGS_AS_ERRORS=ON \
            -DREAPER_GIT_HOOKS_AUTO_UPDATE=OFF \
            -DREAPER_RUN_CLANG_TIDY=OFF \
            -DREAPER_HEADLESS=ON \
            -DREAPER_USE_TRACY=OFF

      - name: Build
        run: cmake --build build

      - name: Test
        run: ctest --test-dir build --output-on-failure

      - name: Install
        if: ${{ matrix.cmake_build_type == 'Release' && matrix.config.cmake_build_shared_libs == 'OFF' }}
        run: |
          cmake --build build --target install
          tar -cvf linux_build.tar ${{ env.release_name }}

      - uses: actions/upload-artifact@v3
        if: ${{ matrix.cmake_build_type == 'Release' && matrix.config.cmake_build_shared_libs == 'OFF' }}
        with:
          name: linux_build
          path: linux_build.tar

      - name: Setup tmate session
        if: ${{ failure() }}
        uses: mxschmitt/action-tmate@v3
        timeout-minutes: 10

  build_windows:
    runs-on: windows-latest
    env:
      release_name: neptune-windows
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
            name: "MSVC Shared",
            cmake_generator: "Visual Studio 17 2022",
            cmake_build_shared_libs: ON,
          }
          - {
            name: "MSVC Static",
            cmake_generator: "Visual Studio 17 2022",
            cmake_build_shared_libs: OFF,
          }
        cmake_arch: [x64]
        cmake_build_type: [Debug, Release]
    name: "Windows ${{ matrix.config.name }} ${{ matrix.cmake_arch }} ${{ matrix.cmake_build_type }}"
    steps:
      - name: Checkout
        uses: nschloe/action-cached-lfs-checkout@v1
        with:
          submodules: true

      - name: Prepare Vulkan SDK
        uses: humbletim/setup-vulkan-sdk@v1.2.0
        with:
          vulkan-query-version: ${{ env.vulkan_sdk_version }}
          vulkan-components: ${{ env.vulkan_sdk_modules }}
          vulkan-use-cache: true

      - name: Configure CMake
        run: |
          cmake .\ -Bbuild `
            -G "${{ matrix.config.cmake_generator }}" `
            -A "${{ matrix.cmake_arch }}" `
            -DCMAKE_INSTALL_PREFIX=${{ env.release_name }} `
            -DBUILD_SHARED_LIBS=${{ matrix.config.cmake_build_shared_libs }} `
            -DREAPER_BUILD_WARNINGS_AS_ERRORS=ON `
            -DREAPER_GIT_HOOKS_AUTO_UPDATE=OFF `
            -DREAPER_RUN_CLANG_TIDY=OFF `
            -DREAPER_HEADLESS=ON `
            -DREAPER_USE_TRACY=OFF

      - name: Build
        run: cmake --build build --config ${{ matrix.cmake_build_type }}

      - name: Test
        run: ctest --test-dir build -C ${{ matrix.cmake_build_type }} --output-on-failure

      - name: Install
        if: ${{ matrix.cmake_build_type == 'Release' && matrix.config.cmake_build_shared_libs == 'OFF' }}
        run: |
          cmake --build build --config ${{ matrix.cmake_build_type }} --target install
          tar -cvf windows_build.tar ${{ env.release_name }}

      - uses: actions/upload-artifact@v3
        if: ${{ matrix.cmake_build_type == 'Release' && matrix.config.cmake_build_shared_libs == 'OFF' }}
        with:
          name: windows_build
          path: windows_build.tar

  deploy_on_itch_io:
    runs-on: ubuntu-latest
    needs:
      - build_ubuntu
      - build_windows
    name: "Deploy to itch.io"
    steps:
      - uses: actions/download-artifact@v3

      - name: Unpack artifacts
        run: |
          pushd linux_build && tar -xvf linux_build.tar && mv linux_build.tar .. && popd
          pushd windows_build && tar -xvf windows_build.tar && mv windows_build.tar .. && popd

      - name: Deploy
        env:
          BUTLER_API_KEY: ${{ secrets.BUTLER_API_KEY }}
        run: |
          curl -L -o butler.zip https://broth.itch.ovh/butler/linux-amd64/LATEST/archive/default
          unzip butler.zip
          chmod +x butler
          ./butler -V
          # FIXME Get the exact value for the release string
          ./butler push --if-changed linux_build ${{ env.itch_io_project_url }}:linux-latest
          ./butler push --if-changed windows_build ${{ env.itch_io_project_url }}:windows-latest
