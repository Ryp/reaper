#///////////////////////////////////////////////////////////////////////////////
#// Reaper
#//
#// Copyright (c) 2015-2017 Thibault Schueller
#// This file is distributed under the MIT License
#///////////////////////////////////////////////////////////////////////////////

include(${CMAKE_SOURCE_DIR}/cmake/Platform.cmake)
include(${CMAKE_SOURCE_DIR}/cmake/Compiler.cmake)
include(${CMAKE_SOURCE_DIR}/cmake/clang-tidy.cmake)

set(CXX_STANDARD_REQUIRED ON)
set_property(GLOBAL PROPERTY USE_FOLDERS ON)

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${Reaper_BINARY_DIR})
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${Reaper_BINARY_DIR})
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${Reaper_BINARY_DIR})

# std:c++latest: added for nested namespaces (vs2015)
set(REAPER_MSVC_COMMON_FLAGS "/std:c++latest")

# Ignore level-4 warning C4201: nonstandard extension used : nameless struct/union
# Ignore level-1 warning C4251: 'identifier' : class 'type' needs to have dll-interface to be used by clients of class 'type2'
set(REAPER_MSVC_DISABLE_WARNINGS "/W0")
set(REAPER_MSVC_DEBUG_FLAGS ${REAPER_MSVC_COMMON_FLAGS} "/W4" "/wd4201" "/wd4251")
set(REAPER_MSVC_RELEASE_FLAGS ${REAPER_MSVC_COMMON_FLAGS} ${REAPER_MSVC_DISABLE_WARNINGS})
set(REAPER_GCC_DEBUG_FLAGS "-Wall" "-Wextra" "-Wundef" "-Wshadow" "-funsigned-char"
        "-Wchar-subscripts" "-Wcast-align" "-Wwrite-strings" "-Wunused" "-Wuninitialized"
        "-Wpointer-arith" "-Wredundant-decls" "-Winline" "-Wformat"
        "-Wformat-security" "-Winit-self" "-Wdeprecated-declarations"
        "-Wmissing-include-dirs" "-Wmissing-declarations")
set(REAPER_GCC_RELEASE_FLAGS "")

# Use the same flags as GCC
set(REAPER_CLANG_DEBUG_FLAGS ${REAPER_GCC_DEBUG_FLAGS})
set(REAPER_CLANG_RELEASE_FLAGS ${REAPER_GCC_RELEASE_FLAGS})

# Useful for CMake-generated files
set(REAPER_GENERATED_BY_CMAKE_MSG "Generated by CMake")

# Use a xxx.vcxproj.user template file to fill the debugging directory
macro(reaper_vs_configure_debugger_command target)
    set(REAPER_MSVC_DEBUGGER_WORKING_DIR ${CMAKE_SOURCE_DIR})
    configure_file(${CMAKE_SOURCE_DIR}/cmake/vs/template.vcxproj.user ${CMAKE_CURRENT_BINARY_DIR}/${target}.vcxproj.user @ONLY)
endmacro()

# Sort sources in folders for visual studio
macro(reaper_fill_vs_source_tree target path_to_strip)
    get_target_property(SOURCE_FILES ${target} SOURCES)
    foreach(FILE ${SOURCE_FILES})
        file(RELATIVE_PATH GROUP ${path_to_strip} ${FILE})
        get_filename_component(GROUP ${GROUP} PATH)
        # skip src from path
        string(REGEX REPLACE "(\\./)?(src)/?" "" GROUP "${GROUP}")
        # changes /'s to \\'s
        string(REPLACE "/" "\\" GROUP "${GROUP}")
        # group into "Source Files" and "Header Files"
        if ("${FILE}" MATCHES ".*\\.cpp" OR "${FILE}" MATCHES ".*\\.inl" OR "${FILE}" MATCHES ".*\\.h" OR "${FILE}" MATCHES ".*\\.hpp")
            set(GROUP "Source Files\\${GROUP}")
        elseif ("${FILE}" MATCHES ".*\\.natvis")
            set(GROUP "Natvis")
        else()
            set(GROUP "Other Files\\${GROUP}")
        endif()
        source_group("${GROUP}" FILES "${FILE}")
    endforeach()
endmacro()

# Automatically generate the header used for exporting/importing symbols
macro(reaper_generate_export_header target project_label)
    # Construct export macro name
    string(TOUPPER ${target} TARGET_UPPERCASE)
    set(LIBRARY_API_MACRO ${TARGET_UPPERCASE}_API)

    # Construct the macro that is used in to tell if the library is being built
    # or just imported. The naming convention is CMake specific.
    set(LIBRARY_BUILDING_MACRO ${target}_EXPORTS)

    # Generate the file from the template.
    set(REAPER_EXPORT_TEMPLATE_PATH ${CMAKE_SOURCE_DIR}/src/LibraryExport.h.in)
    set(LIBRARY_GENERATED_EXPORT_HEADER_PATH ${CMAKE_CURRENT_SOURCE_DIR}/${project_label}Export.h)
    configure_file(${REAPER_EXPORT_TEMPLATE_PATH} ${LIBRARY_GENERATED_EXPORT_HEADER_PATH} @ONLY)
endmacro()

# Helper macro that add default compilation flags for reaper targets
macro(reaper_configure_warnings target enabled)
    if(${enabled})
        if(MSVC)
            target_compile_options(${target} PRIVATE "$<$<CONFIG:DEBUG>:${REAPER_MSVC_DEBUG_FLAGS}>")
            target_compile_options(${target} PRIVATE "$<$<CONFIG:RELEASE>:${REAPER_MSVC_RELEASE_FLAGS}>")
        elseif(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX)
            target_compile_options(${target} PRIVATE "$<$<CONFIG:DEBUG>:${REAPER_GCC_DEBUG_FLAGS}>")
            target_compile_options(${target} PRIVATE "$<$<CONFIG:RELEASE>:${REAPER_GCC_RELEASE_FLAGS}>")
        elseif(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
            target_compile_options(${target} PRIVATE "$<$<CONFIG:DEBUG>:${REAPER_CLANG_DEBUG_FLAGS}>")
            target_compile_options(${target} PRIVATE "$<$<CONFIG:RELEASE>:${REAPER_CLANG_RELEASE_FLAGS}>")
        else()
            message(FATAL_ERROR "Could not detect compiler")
        endif()
    else()
        if(MSVC)
            target_compile_options(${target} PRIVATE "$<$<CONFIG:DEBUG>:${REAPER_MSVC_DISABLE_WARNINGS}>")
            target_compile_options(${target} PRIVATE "$<$<CONFIG:RELEASE>:${REAPER_MSVC_DISABLE_WARNINGS}>")
        endif()
    endif()
endmacro()

# Common helper macro that sets relevant C++ warnings and compilation flags
# see below for specific versions of the macro.
macro(reaper_configure_target_common target project_label)
    set_target_properties(${target} PROPERTIES CXX_STANDARD 14)
    set(TARGET_COMPILE_DEFINITIONS REAPER_BUILD_${REAPER_BUILD_TYPE})
    if(MSVC)
        set_target_properties(${target} PROPERTIES PROJECT_LABEL ${project_label})
        reaper_fill_vs_source_tree(${target} ${CMAKE_CURRENT_SOURCE_DIR})
        target_compile_options(${target} PRIVATE "/MP") # Enable multi-threaded compilation
    elseif(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX)
        target_compile_options(${target} PRIVATE "-fvisibility=hidden")
        add_clang_tidy_flags(${target}) # May give false positives when using GCC
    elseif(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
        target_compile_options(${target} PRIVATE "-fvisibility=hidden")
        add_clang_tidy_flags(${target})
    else()
        message(FATAL_ERROR "Could not detect compiler")
    endif()
    target_compile_definitions(${target} PRIVATE ${TARGET_COMPILE_DEFINITIONS})
endmacro()

# Use this macro for engine libraries
macro(reaper_configure_library target project_label)
    reaper_configure_target_common(${target} ${project_label})
    reaper_configure_warnings(${target} ON)
    reaper_generate_export_header(${target} ${project_label})
endmacro()

# Use this macro for executables
macro(reaper_configure_executable target project_label)
    reaper_configure_target_common(${target} ${project_label})
    reaper_configure_warnings(${target} ON)
endmacro()

# Use this macro for external dependencies
macro(reaper_configure_external_target target project_label)
    reaper_configure_target_common(${target} ${project_label})
    reaper_configure_warnings(${target} OFF)
endmacro()

# Reaper standard test macro
macro(reaper_add_tests library testfiles)
    set(REAPER_TEST_FILES ${testfiles} ${ARGN}) # Expecting a list here
    set(REAPER_TEST_BIN ${library}_tests)
    set(REAPER_TEST_MAIN ${CMAKE_SOURCE_DIR}/src/test/test_main.cpp)
    set(REAPER_TEST_SRCS ${REAPER_TEST_FILES} ${REAPER_TEST_MAIN})

    add_executable(${REAPER_TEST_BIN} ${REAPER_TEST_SRCS})

    reaper_configure_target_common(${REAPER_TEST_BIN} "${REAPER_TEST_BIN}")
    reaper_configure_warnings(${REAPER_TEST_BIN} ON)

    # User includes dirs (won't hide warnings)
    target_include_directories(${REAPER_TEST_BIN} PUBLIC
        ${CMAKE_SOURCE_DIR}/src)

    # External includes dirs (won't show warnings)
    target_include_directories(${REAPER_TEST_BIN} SYSTEM PUBLIC
        ${CMAKE_SOURCE_DIR}/external/doctest)

    target_link_libraries(${REAPER_TEST_BIN} ${library})

    # Register wih ctest
    add_test(NAME ${REAPER_TEST_BIN} COMMAND $<TARGET_FILE:${REAPER_TEST_BIN}> WORKING_DIRECTORY ${CMAKE_SOURCE_DIR})

    if (MSVC)
        set_target_properties(${REAPER_TEST_BIN} PROPERTIES FOLDER Test)
        reaper_vs_configure_debugger_command(${REAPER_TEST_BIN})
    endif()
endmacro()

# Install and update git hooks
macro(reaper_update_git_hooks)
    message(STATUS "Updating git hooks")
    set(GIT_HOOKS_DIR ${CMAKE_SOURCE_DIR}/.git/hooks)
    set(REAPER_HOOKS_DIR ${CMAKE_SOURCE_DIR}/tools/git/hooks)

    # Setup hooks
    configure_file(${REAPER_HOOKS_DIR}/pre-commit.sh ${GIT_HOOKS_DIR}/pre-commit @ONLY)
endmacro()
